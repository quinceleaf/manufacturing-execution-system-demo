# Generated by Django 3.2 on 2021-04-29 00:51

import apps.common.models
import apps.masterdata.models
from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BillOfMaterials',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('state', django_fsm.FSMField(choices=[('DRAFT', 'Draft'), ('AWAITING', 'Awaiting Approval'), ('RETURNED', 'Returned for Revisions'), ('APPROVED', 'Approved'), ('SUPERSEDED', 'Superseded')], default='DRAFT', max_length=50, verbose_name='Status')),
            ],
            options={
                'verbose_name_plural': 'Bills of materials (BoM)',
                'ordering': ['-version', 'state'],
                'permissions': [('change_bom_status', 'Can change status of BOM'), ('increment_bom_version', 'Can increment BOM version'), ('submit_bom_for_approval', 'Can submit BOM for approval')],
                'get_latest_by': ('version',),
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterialsCharacteristics',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('leadtime', models.PositiveSmallIntegerField(default=0, help_text='Lead time, in days')),
                ('temperature_preparation', models.CharField(blank=True, choices=[('HOT', 'Hot'), ('AMBIENT', 'Ambient'), ('COLD', 'Cold')], max_length=8, null=True)),
                ('temperature_storage', models.CharField(blank=True, choices=[('HOT', 'Hot'), ('AMBIENT', 'Ambient'), ('COLD', 'Cold')], max_length=8, null=True)),
                ('temperature_service', models.CharField(blank=True, choices=[('HOT', 'Hot'), ('AMBIENT', 'Ambient'), ('COLD', 'Cold')], max_length=8, null=True)),
                ('note_production', models.TextField(blank=True, null=True, verbose_name='Production Notes')),
                ('total_active_time', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=4, null=True)),
                ('total_inactive_time', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=4, null=True)),
                ('staff_count', models.PositiveSmallIntegerField(default=0)),
                ('note_labor', models.TextField(blank=True, null=True, verbose_name='Labor Notes')),
            ],
            options={
                'verbose_name_plural': 'BoM characteristics',
                'ordering': ['bill_of_materials__product'],
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterialsCost',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('cost_table', models.JSONField(default=apps.masterdata.models.default_cost_table)),
                ('input_cost_oldest', models.DateField()),
                ('input_cost_latest', models.DateField()),
                ('total_cost', models.DecimalField(decimal_places=3, default=Decimal('0'), max_digits=7)),
                ('version', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'verbose_name_plural': 'BoM costs',
                'ordering': ['bill_of_materials', '-created_at'],
                'get_latest_by': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterialsLine',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('sequence', models.PositiveSmallIntegerField(default=1)),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=8)),
                ('quantity_standard', models.DecimalField(decimal_places=3, max_digits=8)),
                ('note', models.CharField(blank=True, max_length=32, null=True)),
                ('version', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'verbose_name_plural': 'BoM lines',
                'ordering': ['sequence', 'item__name'],
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterialsNote',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('note', models.TextField()),
                ('version', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'verbose_name_plural': 'BoM notes',
                'ordering': ['bill_of_materials__product'],
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterialsProcedure',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('procedure', models.TextField()),
                ('language', models.CharField(choices=[('eng', 'English'), ('esp', 'Español'), ('fra', 'Français')], default='eng', max_length=3, verbose_name='Language')),
                ('version', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'verbose_name_plural': 'BoM procedures',
                'ordering': ['bill_of_materials', 'language'],
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterialsResource',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('sequence', models.PositiveSmallIntegerField(default=1)),
                ('capacity_required', models.DecimalField(decimal_places=3, max_digits=8)),
                ('changeover_required', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=8)),
                ('note', models.CharField(blank=True, max_length=32, null=True)),
                ('version', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'verbose_name_plural': 'BoM resources',
                'ordering': ['sequence', 'resource'],
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterialsTree',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=96)),
                ('leadtime', models.PositiveSmallIntegerField(default=0, help_text='Leadtime between when product is made and when it can be used, exclusive of leadtime of any included products')),
                ('quantity_standard', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('scaling_factor', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
            ],
            options={
                'verbose_name_plural': 'BoM trees',
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterialsYield',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('yield_noun', models.CharField(blank=True, help_text='Optional descriptor for bulk yields (weight/volume), ie dough, batter, soup', max_length=24, null=True)),
                ('quantity_weight', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('quantity_weight_standard', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('quantity_volume', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('quantity_volume_standard', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('quantity_each', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('note_each', models.CharField(blank=True, help_text='Indicate what each unit represents: a 3-inch muffin, a half-size hotel pan, full-size sheet pan, etc', max_length=64, null=True)),
                ('scale_multiple_smallest', models.DecimalField(blank=True, decimal_places=3, default=Decimal('0.25'), help_text='Smallest practical batch scale possible (possibly limited by discrete ingredient or equipment). If scale smaller than this is requested, the scaled BOM will reflect this scale instead', max_digits=4)),
                ('scale_multiple_largest', models.DecimalField(blank=True, decimal_places=3, default=Decimal('500'), help_text='Largest practical batch scale possible (possibly limited by equipment size,\n        like mixer or oven). If scale larger than this is requested, will divide scaled BOM into multiple batches', max_digits=6)),
                ('version', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'verbose_name_plural': 'BoM yields',
                'ordering': ['bill_of_materials__product'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalBillOfMaterials',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('state', django_fsm.FSMField(choices=[('DRAFT', 'Draft'), ('AWAITING', 'Awaiting Approval'), ('RETURNED', 'Returned for Revisions'), ('APPROVED', 'Approved'), ('SUPERSEDED', 'Superseded')], default='DRAFT', max_length=50, verbose_name='Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical bill of materials',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBillOfMaterialsCharacteristics',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('leadtime', models.PositiveSmallIntegerField(default=0, help_text='Lead time, in days')),
                ('temperature_preparation', models.CharField(blank=True, choices=[('HOT', 'Hot'), ('AMBIENT', 'Ambient'), ('COLD', 'Cold')], max_length=8, null=True)),
                ('temperature_storage', models.CharField(blank=True, choices=[('HOT', 'Hot'), ('AMBIENT', 'Ambient'), ('COLD', 'Cold')], max_length=8, null=True)),
                ('temperature_service', models.CharField(blank=True, choices=[('HOT', 'Hot'), ('AMBIENT', 'Ambient'), ('COLD', 'Cold')], max_length=8, null=True)),
                ('note_production', models.TextField(blank=True, null=True, verbose_name='Production Notes')),
                ('total_active_time', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=4, null=True)),
                ('total_inactive_time', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=4, null=True)),
                ('staff_count', models.PositiveSmallIntegerField(default=0)),
                ('note_labor', models.TextField(blank=True, null=True, verbose_name='Labor Notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical bill of materials characteristics',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBillOfMaterialsLine',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('sequence', models.PositiveSmallIntegerField(default=1)),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=8)),
                ('quantity_standard', models.DecimalField(decimal_places=3, max_digits=8)),
                ('note', models.CharField(blank=True, max_length=32, null=True)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical bill of materials line',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBillOfMaterialsNote',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('note', models.TextField()),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical bill of materials note',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBillOfMaterialsProcedure',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('procedure', models.TextField()),
                ('language', models.CharField(choices=[('eng', 'English'), ('esp', 'Español'), ('fra', 'Français')], default='eng', max_length=3, verbose_name='Language')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical bill of materials procedure',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBillOfMaterialsResource',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('sequence', models.PositiveSmallIntegerField(default=1)),
                ('capacity_required', models.DecimalField(decimal_places=3, max_digits=8)),
                ('changeover_required', models.DecimalField(blank=True, decimal_places=3, default=0, max_digits=8)),
                ('note', models.CharField(blank=True, max_length=32, null=True)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical bill of materials resource',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBillOfMaterialsYield',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('yield_noun', models.CharField(blank=True, help_text='Optional descriptor for bulk yields (weight/volume), ie dough, batter, soup', max_length=24, null=True)),
                ('quantity_weight', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('quantity_weight_standard', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('quantity_volume', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('quantity_volume_standard', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('quantity_each', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('note_each', models.CharField(blank=True, help_text='Indicate what each unit represents: a 3-inch muffin, a half-size hotel pan, full-size sheet pan, etc', max_length=64, null=True)),
                ('scale_multiple_smallest', models.DecimalField(blank=True, decimal_places=3, default=Decimal('0.25'), help_text='Smallest practical batch scale possible (possibly limited by discrete ingredient or equipment). If scale smaller than this is requested, the scaled BOM will reflect this scale instead', max_digits=4)),
                ('scale_multiple_largest', models.DecimalField(blank=True, decimal_places=3, default=Decimal('500'), help_text='Largest practical batch scale possible (possibly limited by equipment size,\n        like mixer or oven). If scale larger than this is requested, will divide scaled BOM into multiple batches', max_digits=6)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical bill of materials yield',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalItem',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('name', models.CharField(max_length=96, verbose_name='Name')),
                ('category', models.CharField(choices=[('RAW', 'Raw Food Ingredient'), ('PREPARED', 'Prepared Food Ingredient'), ('WIP', 'Work-in-Progress'), ('FINISHED', 'Finished Product'), ('SERVICE', 'Service'), ('MRO', 'Maintenance/Operating Supplies'), ('PACKAGING', 'Packaging/Disposable'), ('OTHER', 'Other/Misc')], default='RAW', max_length=32, verbose_name='Category')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('state', models.CharField(choices=[('AVAIL', 'Available'), ('UNAVAIL', 'Unavailable')], default='AVAIL', max_length=10, verbose_name='Status')),
                ('unit_type', models.CharField(choices=[('WEIGHT', 'Weight'), ('VOLUME', 'Volume'), ('EACH', 'Each'), ('MISC', 'Miscellaneous'), ('INVENTORY', 'Inventory')], default='WEIGHT', max_length=32, verbose_name='Unit Type')),
                ('preserve', models.BooleanField(default=False)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical item',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalItemCharacteristics',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('contains_alcohol', models.BooleanField(default=None, help_text='Does this material or product contain alcohol?', null=True)),
                ('contains_crustacea', models.BooleanField(default=None, help_text='Does this material or product contain crustacean shellfish (crab, lobster or shrimp)?', null=True)),
                ('contains_dairy', models.BooleanField(default=None, help_text='Does this material or product contain dairy?', null=True)),
                ('contains_egg', models.BooleanField(default=None, help_text='Does this material or product contain egg?', null=True)),
                ('contains_fish', models.BooleanField(default=None, help_text='Does this material or product contain fish?', null=True)),
                ('contains_gelatin', models.BooleanField(default=None, help_text='Does this material or product contain gelatin?', null=True)),
                ('contains_honey', models.BooleanField(default=None, help_text='Does this material or product contain honey?', null=True)),
                ('contains_meat', models.BooleanField(default=None, help_text='Does this material or product contain meat/meat products?', null=True)),
                ('contains_peanut', models.BooleanField(default=None, help_text='Does this material or product contain peanuts?', null=True)),
                ('contains_sesame', models.BooleanField(default=None, help_text='Does this material or product contain sesame?', null=True)),
                ('contains_soy', models.BooleanField(default=None, help_text='Does this material or product contain soy?', null=True)),
                ('contains_treenut', models.BooleanField(default=None, help_text='Does this material or product contain treenuts (not peanuts)?', null=True)),
                ('contains_wheat', models.BooleanField(default=None, help_text='Does this material or product contain wheat?', null=True)),
                ('description', models.TextField(blank=True, default='', verbose_name='Description for menus, sales & marketing')),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('shelf_life', models.PositiveIntegerField(default=0, verbose_name='Shelf Life (days)')),
                ('unit_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='List price per unit of product')),
                ('upc_code', models.CharField(blank=True, max_length=12, null=True, verbose_name='UPC Code')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('state', django_fsm.FSMField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('DISQUALIFIED', 'Disqualifed'), ('NAN', 'No Approved Necessary')], default='PENDING', max_length=50, verbose_name='Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical item characteristics',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalItemConversion',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('allowed_weight', models.BooleanField(default=True, null=True)),
                ('allowed_volume', models.BooleanField(default=False)),
                ('allowed_each', models.BooleanField(default=False)),
                ('ratio_weight_to_volume', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of weight to volume, (standardized)')),
                ('ratio_weight_to_each', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of weight to each, (standardized)')),
                ('ratio_volume_to_each', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of volume to each, (standardized)')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical item conversion',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMaterial',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('name', models.CharField(max_length=96, verbose_name='Name')),
                ('category', models.CharField(choices=[('RAW', 'Raw Food Ingredient'), ('PREPARED', 'Prepared Food Ingredient'), ('WIP', 'Work-in-Progress'), ('FINISHED', 'Finished Product'), ('SERVICE', 'Service'), ('MRO', 'Maintenance/Operating Supplies'), ('PACKAGING', 'Packaging/Disposable'), ('OTHER', 'Other/Misc')], default='RAW', max_length=32, verbose_name='Category')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('state', models.CharField(choices=[('AVAIL', 'Available'), ('UNAVAIL', 'Unavailable')], default='AVAIL', max_length=10, verbose_name='Status')),
                ('unit_type', models.CharField(choices=[('WEIGHT', 'Weight'), ('VOLUME', 'Volume'), ('EACH', 'Each'), ('MISC', 'Miscellaneous'), ('INVENTORY', 'Inventory')], default='WEIGHT', max_length=32, verbose_name='Unit Type')),
                ('preserve', models.BooleanField(default=False)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical material',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMaterialCharacteristics',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('contains_alcohol', models.BooleanField(default=None, help_text='Does this material or product contain alcohol?', null=True)),
                ('contains_crustacea', models.BooleanField(default=None, help_text='Does this material or product contain crustacean shellfish (crab, lobster or shrimp)?', null=True)),
                ('contains_dairy', models.BooleanField(default=None, help_text='Does this material or product contain dairy?', null=True)),
                ('contains_egg', models.BooleanField(default=None, help_text='Does this material or product contain egg?', null=True)),
                ('contains_fish', models.BooleanField(default=None, help_text='Does this material or product contain fish?', null=True)),
                ('contains_gelatin', models.BooleanField(default=None, help_text='Does this material or product contain gelatin?', null=True)),
                ('contains_honey', models.BooleanField(default=None, help_text='Does this material or product contain honey?', null=True)),
                ('contains_meat', models.BooleanField(default=None, help_text='Does this material or product contain meat/meat products?', null=True)),
                ('contains_peanut', models.BooleanField(default=None, help_text='Does this material or product contain peanuts?', null=True)),
                ('contains_sesame', models.BooleanField(default=None, help_text='Does this material or product contain sesame?', null=True)),
                ('contains_soy', models.BooleanField(default=None, help_text='Does this material or product contain soy?', null=True)),
                ('contains_treenut', models.BooleanField(default=None, help_text='Does this material or product contain treenuts (not peanuts)?', null=True)),
                ('contains_wheat', models.BooleanField(default=None, help_text='Does this material or product contain wheat?', null=True)),
                ('description', models.TextField(blank=True, default='', verbose_name='Description for menus, sales & marketing')),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('shelf_life', models.PositiveIntegerField(default=0, verbose_name='Shelf Life (days)')),
                ('unit_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='List price per unit of product')),
                ('upc_code', models.CharField(blank=True, max_length=12, null=True, verbose_name='UPC Code')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('state', django_fsm.FSMField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('DISQUALIFIED', 'Disqualifed'), ('NAN', 'No Approved Necessary')], default='PENDING', max_length=50, verbose_name='Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical material characteristics',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMaterialConversion',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('allowed_weight', models.BooleanField(default=True, null=True)),
                ('allowed_volume', models.BooleanField(default=False)),
                ('allowed_each', models.BooleanField(default=False)),
                ('ratio_weight_to_volume', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of weight to volume, (standardized)')),
                ('ratio_weight_to_each', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of weight to each, (standardized)')),
                ('ratio_volume_to_each', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of volume to each, (standardized)')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical material conversion',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProduct',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('name', models.CharField(max_length=96, verbose_name='Name')),
                ('category', models.CharField(choices=[('RAW', 'Raw Food Ingredient'), ('PREPARED', 'Prepared Food Ingredient'), ('WIP', 'Work-in-Progress'), ('FINISHED', 'Finished Product'), ('SERVICE', 'Service'), ('MRO', 'Maintenance/Operating Supplies'), ('PACKAGING', 'Packaging/Disposable'), ('OTHER', 'Other/Misc')], default='RAW', max_length=32, verbose_name='Category')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('state', models.CharField(choices=[('AVAIL', 'Available'), ('UNAVAIL', 'Unavailable')], default='AVAIL', max_length=10, verbose_name='Status')),
                ('unit_type', models.CharField(choices=[('WEIGHT', 'Weight'), ('VOLUME', 'Volume'), ('EACH', 'Each'), ('MISC', 'Miscellaneous'), ('INVENTORY', 'Inventory')], default='WEIGHT', max_length=32, verbose_name='Unit Type')),
                ('preserve', models.BooleanField(default=False)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical product',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProductCharacteristics',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('contains_alcohol', models.BooleanField(default=None, help_text='Does this material or product contain alcohol?', null=True)),
                ('contains_crustacea', models.BooleanField(default=None, help_text='Does this material or product contain crustacean shellfish (crab, lobster or shrimp)?', null=True)),
                ('contains_dairy', models.BooleanField(default=None, help_text='Does this material or product contain dairy?', null=True)),
                ('contains_egg', models.BooleanField(default=None, help_text='Does this material or product contain egg?', null=True)),
                ('contains_fish', models.BooleanField(default=None, help_text='Does this material or product contain fish?', null=True)),
                ('contains_gelatin', models.BooleanField(default=None, help_text='Does this material or product contain gelatin?', null=True)),
                ('contains_honey', models.BooleanField(default=None, help_text='Does this material or product contain honey?', null=True)),
                ('contains_meat', models.BooleanField(default=None, help_text='Does this material or product contain meat/meat products?', null=True)),
                ('contains_peanut', models.BooleanField(default=None, help_text='Does this material or product contain peanuts?', null=True)),
                ('contains_sesame', models.BooleanField(default=None, help_text='Does this material or product contain sesame?', null=True)),
                ('contains_soy', models.BooleanField(default=None, help_text='Does this material or product contain soy?', null=True)),
                ('contains_treenut', models.BooleanField(default=None, help_text='Does this material or product contain treenuts (not peanuts)?', null=True)),
                ('contains_wheat', models.BooleanField(default=None, help_text='Does this material or product contain wheat?', null=True)),
                ('description', models.TextField(blank=True, default='', verbose_name='Description for menus, sales & marketing')),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('shelf_life', models.PositiveIntegerField(default=0, verbose_name='Shelf Life (days)')),
                ('unit_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='List price per unit of product')),
                ('upc_code', models.CharField(blank=True, max_length=12, null=True, verbose_name='UPC Code')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('state', django_fsm.FSMField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('DISQUALIFIED', 'Disqualifed'), ('NAN', 'No Approved Necessary')], default='PENDING', max_length=50, verbose_name='Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical product characteristics',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProductConversion',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('allowed_weight', models.BooleanField(default=True, null=True)),
                ('allowed_volume', models.BooleanField(default=False)),
                ('allowed_each', models.BooleanField(default=False)),
                ('ratio_weight_to_volume', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of weight to volume, (standardized)')),
                ('ratio_weight_to_each', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of weight to each, (standardized)')),
                ('ratio_volume_to_each', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of volume to each, (standardized)')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical product conversion',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalResource',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('capacity', models.PositiveBigIntegerField(default=0, help_text='\n        If the resource is <strong>time-dependent</strong>, the <strong>capacity</strong> represents\n        how many units are available <strong>per hour</strong><br/>\n        If the resource is <strong>space-dependent</strong>, the <strong>capacity</strong> represents\n        how many units are available <strong>in the working facility</strong><br/>\n        ', verbose_name='Capacity')),
                ('name', models.CharField(help_text='\n    The name of the <strong>resource</strong> (example: oven, freezer, mixer),<br/>\n    not the name of the <strong>unit</strong> (example: oven rack-minutes, speed rack-shelves, mixer bowl-minutes)\n    ', max_length=64)),
                ('notes', models.TextField(blank=True, null=True)),
                ('resource_type', models.CharField(choices=[('TIME', 'Time-Dependent'), ('SPACE', 'Space-Dependent')], default='TIME', max_length=8)),
                ('stage', models.CharField(choices=[('WORKING', 'Working'), ('STORAGE', 'Storage')], default='WORKING', help_text='\n        At the <strong>working</strong> stage, resources are used for a known, bounded amount of time (like a mixer or an oven)<br/>\n        At the <strong>storage</strong> stage, resources are used for a indeterminate amount of time (like a freezer)\n        ', max_length=8)),
                ('unit', models.CharField(help_text='\n        Describe units of utilization (ie, oven rack-minutes) that production consumes<br/>\n        If the resource is <strong>time-dependent</strong>, the <strong>unit</strong> should be expressed in terms of <strong>minutes</strong><br/>\n        If the resource is <strong>space-dependent</strong>, the <strong>unit</strong> should be expressed in terms of <strong>area</strong><br/>\n        ', max_length=32, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical resource',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSettings',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('default_unit_system_weight', models.CharField(choices=[('METRIC', 'Metric'), ('US', 'US Customary'), ('NA', 'Does not apply')], default='US', max_length=12)),
                ('default_unit_system_volume', models.CharField(choices=[('METRIC', 'Metric'), ('US', 'US Customary'), ('NA', 'Does not apply')], default='US', max_length=12)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical settings',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTeam',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('name', models.CharField(max_length=32, null=True, verbose_name='Team name')),
                ('slug', models.SlugField(blank=True, max_length=32, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical team',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUnitMeasurement',
            fields=[
                ('id', models.CharField(blank=True, db_index=True, default=apps.common.models.generate_ulid, editable=False, max_length=26)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated at')),
                ('name', models.CharField(db_index=True, max_length=32, verbose_name='Name')),
                ('symbol', models.CharField(max_length=9, verbose_name='Symbol')),
                ('unit_system', models.CharField(choices=[('METRIC', 'Metric'), ('US', 'US Customary'), ('NA', 'Does not apply')], default='NA', max_length=6, verbose_name='System')),
                ('unit_type', models.CharField(choices=[('WEIGHT', 'Weight'), ('VOLUME', 'Volume'), ('EACH', 'Each'), ('MISC', 'Miscellaneous'), ('INVENTORY', 'Inventory')], default='WEIGHT', max_length=12, verbose_name='Type')),
                ('display_quantity_smallest', models.DecimalField(decimal_places=3, default=0.125, max_digits=4, verbose_name='Smallest quantity to display (if possible)')),
                ('display_quantity_largest', models.DecimalField(decimal_places=3, default=1000, max_digits=7, verbose_name='Largest quantity to display (if possible)')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical unit measurement',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=96, verbose_name='Name')),
                ('category', models.CharField(choices=[('RAW', 'Raw Food Ingredient'), ('PREPARED', 'Prepared Food Ingredient'), ('WIP', 'Work-in-Progress'), ('FINISHED', 'Finished Product'), ('SERVICE', 'Service'), ('MRO', 'Maintenance/Operating Supplies'), ('PACKAGING', 'Packaging/Disposable'), ('OTHER', 'Other/Misc')], default='RAW', max_length=32, verbose_name='Category')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('state', models.CharField(choices=[('AVAIL', 'Available'), ('UNAVAIL', 'Unavailable')], default='AVAIL', max_length=10, verbose_name='Status')),
                ('unit_type', models.CharField(choices=[('WEIGHT', 'Weight'), ('VOLUME', 'Volume'), ('EACH', 'Each'), ('MISC', 'Miscellaneous'), ('INVENTORY', 'Inventory')], default='WEIGHT', max_length=32, verbose_name='Unit Type')),
                ('preserve', models.BooleanField(default=False)),
                ('version', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'ordering': ['name'],
                'get_latest_by': ['version'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('capacity', models.PositiveBigIntegerField(default=0, help_text='\n        If the resource is <strong>time-dependent</strong>, the <strong>capacity</strong> represents\n        how many units are available <strong>per hour</strong><br/>\n        If the resource is <strong>space-dependent</strong>, the <strong>capacity</strong> represents\n        how many units are available <strong>in the working facility</strong><br/>\n        ', verbose_name='Capacity')),
                ('name', models.CharField(help_text='\n    The name of the <strong>resource</strong> (example: oven, freezer, mixer),<br/>\n    not the name of the <strong>unit</strong> (example: oven rack-minutes, speed rack-shelves, mixer bowl-minutes)\n    ', max_length=64)),
                ('notes', models.TextField(blank=True, null=True)),
                ('resource_type', models.CharField(choices=[('TIME', 'Time-Dependent'), ('SPACE', 'Space-Dependent')], default='TIME', max_length=8)),
                ('stage', models.CharField(choices=[('WORKING', 'Working'), ('STORAGE', 'Storage')], default='WORKING', help_text='\n        At the <strong>working</strong> stage, resources are used for a known, bounded amount of time (like a mixer or an oven)<br/>\n        At the <strong>storage</strong> stage, resources are used for a indeterminate amount of time (like a freezer)\n        ', max_length=8)),
                ('unit', models.CharField(help_text='\n        Describe units of utilization (ie, oven rack-minutes) that production consumes<br/>\n        If the resource is <strong>time-dependent</strong>, the <strong>unit</strong> should be expressed in terms of <strong>minutes</strong><br/>\n        If the resource is <strong>space-dependent</strong>, the <strong>unit</strong> should be expressed in terms of <strong>area</strong><br/>\n        ', max_length=32, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=32, null=True, verbose_name='Team name')),
                ('slug', models.SlugField(blank=True, max_length=32, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UnitMeasurement',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='Name')),
                ('symbol', models.CharField(max_length=9, verbose_name='Symbol')),
                ('unit_system', models.CharField(choices=[('METRIC', 'Metric'), ('US', 'US Customary'), ('NA', 'Does not apply')], default='NA', max_length=6, verbose_name='System')),
                ('unit_type', models.CharField(choices=[('WEIGHT', 'Weight'), ('VOLUME', 'Volume'), ('EACH', 'Each'), ('MISC', 'Miscellaneous'), ('INVENTORY', 'Inventory')], default='WEIGHT', max_length=12, verbose_name='Type')),
                ('display_quantity_smallest', models.DecimalField(decimal_places=3, default=0.125, max_digits=4, verbose_name='Smallest quantity to display (if possible)')),
                ('display_quantity_largest', models.DecimalField(decimal_places=3, default=1000, max_digits=7, verbose_name='Largest quantity to display (if possible)')),
            ],
            options={
                'ordering': ['unit_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('default_unit_system_weight', models.CharField(choices=[('METRIC', 'Metric'), ('US', 'US Customary'), ('NA', 'Does not apply')], default='US', max_length=12)),
                ('default_unit_system_volume', models.CharField(choices=[('METRIC', 'Metric'), ('US', 'US Customary'), ('NA', 'Does not apply')], default='US', max_length=12)),
                ('default_unit_volume', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='masterdata.unitmeasurement')),
                ('default_unit_weight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='masterdata.unitmeasurement')),
            ],
            options={
                'verbose_name_plural': 'Settings',
                'permissions': [('change_masterdata_settings', 'Can change MasterData settings')],
            },
        ),
        migrations.CreateModel(
            name='ItemCost',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('unit_cost_weight', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Cost per unit, weight, (standardized)')),
                ('unit_cost_volume', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Cost per unit, volume (standardized)')),
                ('unit_cost_each', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Cost per each')),
                ('basis', models.CharField(choices=[('DIRECT', 'Directly Assigned'), ('CALCULATED', 'Calculated'), ('NAIVE', 'Naïve'), ('CUMULATIVE', 'Cumulative'), ('MA3', 'Moving Average (3)'), ('MA5', 'Moving Average (5)'), ('MA7', 'Moving Average (5)'), ('EXP', 'Exponential Smoothing')], default='DIRECT', max_length=24, verbose_name='Assignment basis')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='costs', to='masterdata.item')),
            ],
            options={
                'ordering': ['created_at'],
                'get_latest_by': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ItemConversion',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('allowed_weight', models.BooleanField(default=True, null=True)),
                ('allowed_volume', models.BooleanField(default=False)),
                ('allowed_each', models.BooleanField(default=False)),
                ('ratio_weight_to_volume', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of weight to volume, (standardized)')),
                ('ratio_weight_to_each', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of weight to each, (standardized)')),
                ('ratio_volume_to_each', models.DecimalField(decimal_places=3, default=0.0, max_digits=7, verbose_name='Ratio of volume to each, (standardized)')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='conversion', to='masterdata.item')),
            ],
            options={
                'get_latest_by': ['version'],
            },
        ),
        migrations.CreateModel(
            name='ItemCharacteristics',
            fields=[
                ('id', models.CharField(blank=True, default=apps.common.models.generate_ulid, editable=False, max_length=26, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('contains_alcohol', models.BooleanField(default=None, help_text='Does this material or product contain alcohol?', null=True)),
                ('contains_crustacea', models.BooleanField(default=None, help_text='Does this material or product contain crustacean shellfish (crab, lobster or shrimp)?', null=True)),
                ('contains_dairy', models.BooleanField(default=None, help_text='Does this material or product contain dairy?', null=True)),
                ('contains_egg', models.BooleanField(default=None, help_text='Does this material or product contain egg?', null=True)),
                ('contains_fish', models.BooleanField(default=None, help_text='Does this material or product contain fish?', null=True)),
                ('contains_gelatin', models.BooleanField(default=None, help_text='Does this material or product contain gelatin?', null=True)),
                ('contains_honey', models.BooleanField(default=None, help_text='Does this material or product contain honey?', null=True)),
                ('contains_meat', models.BooleanField(default=None, help_text='Does this material or product contain meat/meat products?', null=True)),
                ('contains_peanut', models.BooleanField(default=None, help_text='Does this material or product contain peanuts?', null=True)),
                ('contains_sesame', models.BooleanField(default=None, help_text='Does this material or product contain sesame?', null=True)),
                ('contains_soy', models.BooleanField(default=None, help_text='Does this material or product contain soy?', null=True)),
                ('contains_treenut', models.BooleanField(default=None, help_text='Does this material or product contain treenuts (not peanuts)?', null=True)),
                ('contains_wheat', models.BooleanField(default=None, help_text='Does this material or product contain wheat?', null=True)),
                ('description', models.TextField(blank=True, default='', verbose_name='Description for menus, sales & marketing')),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('shelf_life', models.PositiveIntegerField(default=0, verbose_name='Shelf Life (days)')),
                ('unit_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='List price per unit of product')),
                ('upc_code', models.CharField(blank=True, max_length=12, null=True, verbose_name='UPC Code')),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('state', django_fsm.FSMField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('DISQUALIFIED', 'Disqualifed'), ('NAN', 'No Approved Necessary')], default='PENDING', max_length=50, verbose_name='Status')),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='characteristics', to='masterdata.item')),
            ],
            options={
                'verbose_name_plural': 'Item characteristics',
                'get_latest_by': ['version'],
            },
        ),
    ]
